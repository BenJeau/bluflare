/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./../routes/__root";
import { Route as IndexImport } from "./../routes/index";
import { Route as UsersIndexImport } from "./../routes/users.index";
import { Route as PostsIndexImport } from "./../routes/posts.index";
import { Route as InterestsIndexImport } from "./../routes/interests.index";
import { Route as InterestsCreateImport } from "./../routes/interests.create";
import { Route as InterestsSlugImport } from "./../routes/interests.$slug";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const UsersIndexRoute = UsersIndexImport.update({
  id: "/users/",
  path: "/users/",
  getParentRoute: () => rootRoute,
} as any);

const PostsIndexRoute = PostsIndexImport.update({
  id: "/posts/",
  path: "/posts/",
  getParentRoute: () => rootRoute,
} as any);

const InterestsIndexRoute = InterestsIndexImport.update({
  id: "/interests/",
  path: "/interests/",
  getParentRoute: () => rootRoute,
} as any);

const InterestsCreateRoute = InterestsCreateImport.update({
  id: "/interests/create",
  path: "/interests/create",
  getParentRoute: () => rootRoute,
} as any);

const InterestsSlugRoute = InterestsSlugImport.update({
  id: "/interests/$slug",
  path: "/interests/$slug",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/interests/$slug": {
      id: "/interests/$slug";
      path: "/interests/$slug";
      fullPath: "/interests/$slug";
      preLoaderRoute: typeof InterestsSlugImport;
      parentRoute: typeof rootRoute;
    };
    "/interests/create": {
      id: "/interests/create";
      path: "/interests/create";
      fullPath: "/interests/create";
      preLoaderRoute: typeof InterestsCreateImport;
      parentRoute: typeof rootRoute;
    };
    "/interests/": {
      id: "/interests/";
      path: "/interests";
      fullPath: "/interests";
      preLoaderRoute: typeof InterestsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/posts/": {
      id: "/posts/";
      path: "/posts";
      fullPath: "/posts";
      preLoaderRoute: typeof PostsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/users/": {
      id: "/users/";
      path: "/users";
      fullPath: "/users";
      preLoaderRoute: typeof UsersIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/interests/$slug": typeof InterestsSlugRoute;
  "/interests/create": typeof InterestsCreateRoute;
  "/interests": typeof InterestsIndexRoute;
  "/posts": typeof PostsIndexRoute;
  "/users": typeof UsersIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/interests/$slug": typeof InterestsSlugRoute;
  "/interests/create": typeof InterestsCreateRoute;
  "/interests": typeof InterestsIndexRoute;
  "/posts": typeof PostsIndexRoute;
  "/users": typeof UsersIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/interests/$slug": typeof InterestsSlugRoute;
  "/interests/create": typeof InterestsCreateRoute;
  "/interests/": typeof InterestsIndexRoute;
  "/posts/": typeof PostsIndexRoute;
  "/users/": typeof UsersIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/interests/$slug"
    | "/interests/create"
    | "/interests"
    | "/posts"
    | "/users";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/interests/$slug"
    | "/interests/create"
    | "/interests"
    | "/posts"
    | "/users";
  id:
    | "__root__"
    | "/"
    | "/interests/$slug"
    | "/interests/create"
    | "/interests/"
    | "/posts/"
    | "/users/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  InterestsSlugRoute: typeof InterestsSlugRoute;
  InterestsCreateRoute: typeof InterestsCreateRoute;
  InterestsIndexRoute: typeof InterestsIndexRoute;
  PostsIndexRoute: typeof PostsIndexRoute;
  UsersIndexRoute: typeof UsersIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InterestsSlugRoute: InterestsSlugRoute,
  InterestsCreateRoute: InterestsCreateRoute,
  InterestsIndexRoute: InterestsIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/interests/$slug",
        "/interests/create",
        "/interests/",
        "/posts/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/interests/$slug": {
      "filePath": "interests.$slug.tsx"
    },
    "/interests/create": {
      "filePath": "interests.create.tsx"
    },
    "/interests/": {
      "filePath": "interests.index.tsx"
    },
    "/posts/": {
      "filePath": "posts.index.tsx"
    },
    "/users/": {
      "filePath": "users.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
