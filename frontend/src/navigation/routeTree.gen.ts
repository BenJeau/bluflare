/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./../routes/__root";
import { Route as IndexImport } from "./../routes/index";
import { Route as UsersIndexImport } from "./../routes/users.index";
import { Route as UrlsIndexImport } from "./../routes/urls.index";
import { Route as TopicsIndexImport } from "./../routes/topics.index";
import { Route as StatsIndexImport } from "./../routes/stats.index";
import { Route as PostsIndexImport } from "./../routes/posts.index";
import { Route as HashtagsIndexImport } from "./../routes/hashtags.index";
import { Route as DocsIndexImport } from "./../routes/docs.index";
import { Route as TopicsCreateImport } from "./../routes/topics.create";
import { Route as TopicsSlugImport } from "./../routes/topics.$slug";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const UsersIndexRoute = UsersIndexImport.update({
  id: "/users/",
  path: "/users/",
  getParentRoute: () => rootRoute,
} as any);

const UrlsIndexRoute = UrlsIndexImport.update({
  id: "/urls/",
  path: "/urls/",
  getParentRoute: () => rootRoute,
} as any);

const TopicsIndexRoute = TopicsIndexImport.update({
  id: "/topics/",
  path: "/topics/",
  getParentRoute: () => rootRoute,
} as any);

const StatsIndexRoute = StatsIndexImport.update({
  id: "/stats/",
  path: "/stats/",
  getParentRoute: () => rootRoute,
} as any);

const PostsIndexRoute = PostsIndexImport.update({
  id: "/posts/",
  path: "/posts/",
  getParentRoute: () => rootRoute,
} as any);

const HashtagsIndexRoute = HashtagsIndexImport.update({
  id: "/hashtags/",
  path: "/hashtags/",
  getParentRoute: () => rootRoute,
} as any);

const DocsIndexRoute = DocsIndexImport.update({
  id: "/docs/",
  path: "/docs/",
  getParentRoute: () => rootRoute,
} as any);

const TopicsCreateRoute = TopicsCreateImport.update({
  id: "/topics/create",
  path: "/topics/create",
  getParentRoute: () => rootRoute,
} as any);

const TopicsSlugRoute = TopicsSlugImport.update({
  id: "/topics/$slug",
  path: "/topics/$slug",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/topics/$slug": {
      id: "/topics/$slug";
      path: "/topics/$slug";
      fullPath: "/topics/$slug";
      preLoaderRoute: typeof TopicsSlugImport;
      parentRoute: typeof rootRoute;
    };
    "/topics/create": {
      id: "/topics/create";
      path: "/topics/create";
      fullPath: "/topics/create";
      preLoaderRoute: typeof TopicsCreateImport;
      parentRoute: typeof rootRoute;
    };
    "/docs/": {
      id: "/docs/";
      path: "/docs";
      fullPath: "/docs";
      preLoaderRoute: typeof DocsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/hashtags/": {
      id: "/hashtags/";
      path: "/hashtags";
      fullPath: "/hashtags";
      preLoaderRoute: typeof HashtagsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/posts/": {
      id: "/posts/";
      path: "/posts";
      fullPath: "/posts";
      preLoaderRoute: typeof PostsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/stats/": {
      id: "/stats/";
      path: "/stats";
      fullPath: "/stats";
      preLoaderRoute: typeof StatsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/topics/": {
      id: "/topics/";
      path: "/topics";
      fullPath: "/topics";
      preLoaderRoute: typeof TopicsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/urls/": {
      id: "/urls/";
      path: "/urls";
      fullPath: "/urls";
      preLoaderRoute: typeof UrlsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/users/": {
      id: "/users/";
      path: "/users";
      fullPath: "/users";
      preLoaderRoute: typeof UsersIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/topics/$slug": typeof TopicsSlugRoute;
  "/topics/create": typeof TopicsCreateRoute;
  "/docs": typeof DocsIndexRoute;
  "/hashtags": typeof HashtagsIndexRoute;
  "/posts": typeof PostsIndexRoute;
  "/stats": typeof StatsIndexRoute;
  "/topics": typeof TopicsIndexRoute;
  "/urls": typeof UrlsIndexRoute;
  "/users": typeof UsersIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/topics/$slug": typeof TopicsSlugRoute;
  "/topics/create": typeof TopicsCreateRoute;
  "/docs": typeof DocsIndexRoute;
  "/hashtags": typeof HashtagsIndexRoute;
  "/posts": typeof PostsIndexRoute;
  "/stats": typeof StatsIndexRoute;
  "/topics": typeof TopicsIndexRoute;
  "/urls": typeof UrlsIndexRoute;
  "/users": typeof UsersIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/topics/$slug": typeof TopicsSlugRoute;
  "/topics/create": typeof TopicsCreateRoute;
  "/docs/": typeof DocsIndexRoute;
  "/hashtags/": typeof HashtagsIndexRoute;
  "/posts/": typeof PostsIndexRoute;
  "/stats/": typeof StatsIndexRoute;
  "/topics/": typeof TopicsIndexRoute;
  "/urls/": typeof UrlsIndexRoute;
  "/users/": typeof UsersIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/topics/$slug"
    | "/topics/create"
    | "/docs"
    | "/hashtags"
    | "/posts"
    | "/stats"
    | "/topics"
    | "/urls"
    | "/users";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/topics/$slug"
    | "/topics/create"
    | "/docs"
    | "/hashtags"
    | "/posts"
    | "/stats"
    | "/topics"
    | "/urls"
    | "/users";
  id:
    | "__root__"
    | "/"
    | "/topics/$slug"
    | "/topics/create"
    | "/docs/"
    | "/hashtags/"
    | "/posts/"
    | "/stats/"
    | "/topics/"
    | "/urls/"
    | "/users/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  TopicsSlugRoute: typeof TopicsSlugRoute;
  TopicsCreateRoute: typeof TopicsCreateRoute;
  DocsIndexRoute: typeof DocsIndexRoute;
  HashtagsIndexRoute: typeof HashtagsIndexRoute;
  PostsIndexRoute: typeof PostsIndexRoute;
  StatsIndexRoute: typeof StatsIndexRoute;
  TopicsIndexRoute: typeof TopicsIndexRoute;
  UrlsIndexRoute: typeof UrlsIndexRoute;
  UsersIndexRoute: typeof UsersIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TopicsSlugRoute: TopicsSlugRoute,
  TopicsCreateRoute: TopicsCreateRoute,
  DocsIndexRoute: DocsIndexRoute,
  HashtagsIndexRoute: HashtagsIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  StatsIndexRoute: StatsIndexRoute,
  TopicsIndexRoute: TopicsIndexRoute,
  UrlsIndexRoute: UrlsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/topics/$slug",
        "/topics/create",
        "/docs/",
        "/hashtags/",
        "/posts/",
        "/stats/",
        "/topics/",
        "/urls/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/topics/$slug": {
      "filePath": "topics.$slug.tsx"
    },
    "/topics/create": {
      "filePath": "topics.create.tsx"
    },
    "/docs/": {
      "filePath": "docs.index.tsx"
    },
    "/hashtags/": {
      "filePath": "hashtags.index.tsx"
    },
    "/posts/": {
      "filePath": "posts.index.tsx"
    },
    "/stats/": {
      "filePath": "stats.index.tsx"
    },
    "/topics/": {
      "filePath": "topics.index.tsx"
    },
    "/urls/": {
      "filePath": "urls.index.tsx"
    },
    "/users/": {
      "filePath": "users.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
